<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

    <!-- 默认访问跳转到登录页面(即定义无需Controller的url<->view直接映射) -->
    <mvc:view-controller path="/" view-name="forward:/index.html"/>

    <!-- 1：注解的方式，引入组件的自动扫描，在类和方法上可以添加对注解的支持 -->
    <!-- 这是SpringMVC的配置文件，这里的扫描仅仅针对@Controller和@Handlermapping来说的，而Spring配置
        文件中的扫描是针对@Service @Repository，@Components来说的，Spring是桥梁, 而SpringMVC更专注了控制和转发，所以虽然两者都要进行注解扫描，但是所扫描的
        内容是不一样的 -->
    <!--当配置为base-package="cn.kanyun"不仅仅扫描到带有@Controller注解的Bean，还会默认扫描到带有@Service/@Repository注解的Bean，可能造成事务不起作用等问题-->
    <!--此时需要加上use-default-filters=“false”禁用掉默认的行为,配置为base-package="cn.kanyun.cpa.controller"则不会-->
    <context:component-scan base-package="cn.kanyun.cpa.controller" />
    <!-- 通知spring使用cglib而不是jdk的来生成代理方法，这样 AOP可以拦截到Controller -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!-- handlermapping 支持@RequestMapping,@ReponseBody,@Exceptionhandler -->
    <mvc:annotation-driven/>

    <!-- 对静态资源文件的访问  方案一 （二选一） -->
    <!--SpringMVC3.0之后推荐使用-->
    <!-- 据说是如果静态资源放在WEB-INF下，使用该命令可以加载，但是为了安全静态资源应该加载webroot下 -->
    <!--使用该配置的前提是web.xml里的DispatcherServlet设置的是拦截所有请求（<url-pattern>/</url-pattern>）-->
    <!--如果只是拦截.do请求(<url-pattern>*.do</url-pattern>)，则不必设置该配置-->
     <mvc:default-servlet-handler/>

    <!-- 对静态资源文件的访问  方案二 （二选一）-->
    <!--加<mvc:resources...前，要加上<mvc:annotation-driven/>，否则servlet控件器会解析失败-->
    <!-- 由于web.xml中设置是：由SpringMVC拦截所有请求,于是在读取静态资源文件的时候就会受到影响(说白了就是读不到) -->
    <!-- 经过下面的配置，该标签的作用就是：所有页面中引用"/js/**"的资源，都会从"/resources/js/"里面进行查找 -->
     <!--<mvc:resources mapping="/resources/**" location="/resources/" />-->

    <!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
    <!-- 配置ViewResolver视图解析器 -->
    <bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 这里的配置是自动给后面servlet的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
        <property name="prefix" value="/"/>
        <property name="suffix" value=".html"/>
    </bean>
    <!-- 文件上传配置 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding">
            <value>UTF-8</value>
        </property>
        <property name="maxUploadSize">
            <value>1048576000</value><!-- 总上传文件大小限制为1000M，31*1024*1024 -->
        </property>
        <property name="maxInMemorySize">
            <value>4096</value>
        </property>
    </bean>
</beans>