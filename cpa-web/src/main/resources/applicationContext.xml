<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-4.0.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
     http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
    <!-- 加载配置文件 -->
    <!--ignore-unresolvable：是否忽略解析不到的属性，如果不忽略，找不到将抛出异常-->
    <context:property-placeholder location="classpath:db.properties" ignore-unresolvable="true"/>
    <!-- 1：注解的方式，引入组件的自动扫描，在类和方法上可以添加对注解的支持 -->
    <!-- Spring的扫描仅仅是扫描@Service @Repository，@Components标记!!!@Controller是有SpingMVC来扫描的 -->
    <context:component-scan base-package="cn.kanyun"/>
    <!-- Druid数据库连接池 -->
    <bean id="CpaDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="driverClassName" value="${driverClassName}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${password}"/>
        <!-- 通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat 日志用的filter:log4j 防御sql注入的filter:wall -->
        <property name="filters" value="stat,log4j"/>
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="${maxActive}"/>
        <!-- 初始化连接数量 -->
        <property name="initialSize" value="${initialSize}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${maxWait}"/>
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="${minIdle}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!-- 打开removeAbandoned功能(连接泄漏监测，怀疑存在泄漏之后再打开) -->
        <property name="removeAbandoned" value="true"/>
        <!-- 1800秒，也就是30分钟, 打开removeAbandoned功能  -->
        <property name="removeAbandonedTimeout" value="1800"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true"/>
    </bean>

    <!-- 3:创建sessionFactory，这是spring整合hibernate的入口 -->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="CpaDataSource"/>
        <!--将Hibernate整合进spring的配置文件中，不配置这个可能会造成 is not mapped 的错误-->
        <property name="configLocation">
            <value>classpath:hibernate.cfg.xml</value>
        </property>
        <property name="annotatedClasses">
            <list>
                <value>cn.kanyun.cpa.model.system.CpaPermission</value>
                <value>cn.kanyun.cpa.model.system.CpaRole</value>
                <value>cn.kanyun.cpa.model.system.RolePermission</value>
                <value>cn.kanyun.cpa.model.system.UserRole</value>
                <value>cn.kanyun.cpa.model.system.CpaPermission</value>
                <value>cn.kanyun.cpa.model.system.CpaRole</value>
                <value>cn.kanyun.cpa.model.system.RolePermission</value>
                <value>cn.kanyun.cpa.model.system.UserRole</value>
            </list>
        </property>
        <property name="mappingLocations">
            <list>
                <value>classpath:cn/kanyun/cpa/model/system/CpaPermission.hbm.xml</value>
                <value>classpath:cn/kanyun/cpa/model/system/CpaRole.hbm.xml</value>
                <value>classpath:cn/kanyun/cpa/model/system/RolePermission.hbm.xml</value>
                <value>classpath:cn/kanyun/cpa/model/system/UserRole.hbm.xml</value>
                <value>classpath:cn/kanyun/cpa/model/system/CpaPermission.hbm.xml</value>
                <value>classpath:cn/kanyun/cpa/model/system/CpaSolution.hbm.xml</value>
                <value>classpath:cn/kanyun/cpa/model/system/UserRole.hbm.xml</value>
                <value>classpath:cn/kanyun/cpa/model/system/CpaPermission.hbm.xml</value>
                <value>classpath:cn/kanyun/cpa/model/system/RolePermission.hbm.xml</value>
                <value>classpath:cn/kanyun/cpa/model/system/CpaPermission.hbm.xml</value>
                <value>classpath:cn/kanyun/cpa/model/system/RolePermission.hbm.xml</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.connection.url"><![CDATA[jdbc:mysql://localhost:3306/cpa?useUnicode=true&characterEncoding=utf8]]></prop>
                <prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop>
            </props>
        </property>
        <!--Hibernate与Spring整合有两种方式，一种是写hibernate.cfg.xml文件，一种不写hibernate的配置文件它和spring配置文件写在一起，故需如下配置-->
        <!--<property name="hibernateProperties">-->
            <!--<props>-->
                <!--<prop key="hibernate.connection.url">jdbc:mysql://localhost:3306/cpa</prop>-->
                <!--<prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop>-->
            <!--</props>-->
        <!--</property>-->
    </bean>
    <!-- 报错找不到“找不到类型返回值的转换器”解决方案，同时应该加入这两个jar包 -->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8"/>
            </bean>
            <!-- 将Jackson2HttpMessageConverter的默认格式化输出设为true -->
            <bean
                    class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="prettyPrint" value="true"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <!-- 启动对@AspectJ注解的支持 -->
    <aop:aspectj-autoproxy/>
    <!-- 事务配置 ，此不是必须的，只有需要支持事务控制的工程在才需要，不过一般都需要，所以一般都需要配置这个 -->
    <!-- 配置事务管理器bean,使用HibernateTransactionManager事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/> <!-- 事务中获取session时，是从这里获取的 -->
    </bean>
    <!-- 注解实现事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>  
